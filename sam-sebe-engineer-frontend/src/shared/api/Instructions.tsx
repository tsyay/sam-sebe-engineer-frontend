import type { Instruction, Step, ElectronicComponent } from "../../entities";
import { getElectronicComponentById } from "./ElectronicComponents";

import image from "../assets/tempImage.png";
const instructions: Instruction[] = [
  {
    instructionId: 1,
    title: "Сборка простого радиоприёмника",
    description:
      "Это пошаговое руководство по созданию детекторного радиоприёмника — устройства, которое принимает радиосигналы без использования источника питания. "
      + "Вы познакомитесь с принципом работы электромагнитных волн, диода и катушки индуктивности. "
      + "Радиоприёмник способен улавливать локальные радиостанции и преобразовывать их сигналы в звук, слышимый через наушники.",
    previewImage: image,
    components: [1, 5, 7],
    steps: [
      {
        stepId: 1,
        image: image,
        title: "Намотка катушки",
        description:
          "Возьмите ферритовый стержень и намотайте на него примерно 50 витков эмалированного провода. "
          + "Старайтесь, чтобы витки ложились ровно и плотно друг к другу. "
          + "Эта катушка будет служить настроечным элементом, позволяя приёмнику улавливать радиоволны на определённой частоте.",
        instructionId: 1,
      },
      {
        stepId: 2,
        image: image,
        title: "Подключение диода",
        description:
          "Соедините вывод катушки с диодом. "
          + "Диод будет выделять полезный сигнал из радиочастотных колебаний, превращая их в звуковой сигнал. "
          + "Очень важно соблюдать правильную полярность диода, иначе схема не будет работать.",
        instructionId: 1,
      },
      {
        stepId: 3,
        image: image,
        title: "Подключение наушников",
        description:
          "Подсоедините высокоомные наушники к цепи катушки и диода. "
          + "Через них вы сможете услышать радиосигналы, которые улавливает приёмник. "
          + "Постарайтесь настроить катушку, перемещая контакты, чтобы поймать станцию с более чистым звуком.",
        instructionId: 1,
      },
    ],
  },
  {
    instructionId: 2,
    title: "Сборка мигающего светодиода",
    description:
      "В этом проекте вы соберёте простую схему с использованием таймера NE555. "
      + "Она позволяет заставить светодиод мигать с определённой частотой. "
      + "Частота мигания регулируется резисторами и конденсатором. "
      + "Это отличный пример того, как электронные компоненты могут взаимодействовать для создания визуального эффекта.",
    previewImage: image,
    components: [1, 2, 3, 6],
    steps: [
      {
        stepId: 1,
        image: image,
        title: "Установка микросхемы NE555",
        description:
          "Поместите микросхему NE555 в макетную плату, правильно ориентировав её по метке. "
          + "Это центральный элемент схемы, который создаёт импульсы для управления светодиодом.",
        instructionId: 2,
      },
      {
        stepId: 2,
        image: image,
        title: "Подключение резисторов и конденсатора",
        description:
          "Подключите к выводам микросхемы резисторы 1 кОм и 10 кОм, а также конденсатор на 10 мкФ. "
          + "Эти элементы формируют временные параметры импульсов: чем больше сопротивление и ёмкость, тем медленнее будет мигать светодиод.",
        instructionId: 2,
      },
      {
        stepId: 3,
        image: image,
        title: "Подключение светодиода",
        description:
          "Подключите анод светодиода к выходу микросхемы через резистор 330 Ом, а катод — к земле. "
          + "Теперь при подаче питания вы увидите, как светодиод мигает с заданной частотой. "
          + "Попробуйте заменить резисторы или конденсатор и понаблюдайте, как изменится частота мигания.",
        instructionId: 2,
      },
    ],
  },
  {
    instructionId: 3,
    title: "Сборка усилителя на транзисторе",
    description:
      "В этом проекте вы соберёте простой аудиоусилитель на транзисторе BC547. "
      + "Схема позволяет усиливать слабый звуковой сигнал, например с микрофона или телефона, и воспроизводить его через динамик. "
      + "Вы узнаете, как транзистор работает в режиме усилителя и какую роль играют конденсаторы в обработке сигнала.",
    previewImage: image,
    components: [2, 4, 10],
    steps: [
      {
        stepId: 1,
        image: image,
        title: "Установка транзистора",
        description:
          "Разместите транзистор BC547 на макетной плате, правильно ориентируя его выводы: база, коллектор и эмиттер. "
          + "Этот компонент будет усиливать входной аудиосигнал.",
        instructionId: 3,
      },
      {
        stepId: 2,
        image: image,
        title: "Подключение конденсатора",
        description:
          "Соедините входной сигнал с базой транзистора через электролитический конденсатор ёмкостью 10 мкФ. "
          + "Конденсатор убирает постоянную составляющую и пропускает только переменные звуковые колебания.",
        instructionId: 3,
      },
      {
        stepId: 3,
        image: image,
        title: "Подключение динамика",
        description:
          "Подсоедините динамик к коллектору транзистора и источнику питания. "
          + "Динамик преобразует усиленный сигнал в слышимый звук. "
          + "Если всё подключено правильно, вы услышите более громкий звук по сравнению с исходным сигналом.",
        instructionId: 3,
      },
    ],
  },
];

// Получить все инструкции
export function getAllInstructions(): Instruction[] {
  return instructions;
}

// Получить инструкцию по id
export function getInstructionById(id: number): Instruction | undefined {
  return instructions.find((instr) => instr.instructionId === id);
}

// Получить шаги инструкции
export function getStepsByInstructionId(id: number): Step[] {
  return getInstructionById(id)?.steps ?? [];
}

// Получить шаг по stepId
export function getStepById(
  instructionId: number,
  stepId: number
): Step | undefined {
  return getInstructionById(instructionId)?.steps.find(
    (step) => step.stepId === stepId
  );
}

export function getComponentsForInstruction(
  instruction: Instruction
): ElectronicComponent[] | undefined {
  return instruction.components
    ?.map((id) => getElectronicComponentById(id))
    .filter((comp): comp is ElectronicComponent => comp !== undefined);
}
